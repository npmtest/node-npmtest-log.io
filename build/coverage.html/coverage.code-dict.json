{"/home/travis/build/npmtest/node-npmtest-log.io/test.js":"/* istanbul instrument in package npmtest_log_io */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-log.io/lib.npmtest_log.io.js":"/* istanbul instrument in package npmtest_log_io */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_log_io = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_log_io = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-log.io/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-log.io && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_log_io */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_log_io\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_log_io.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_log_io.rollup.js'] =\n            local.assetsDict['/assets.npmtest_log_io.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_log_io.__dirname + '/lib.npmtest_log_io.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-log.io/node_modules/log.io/index.js":"module.exports = {\n  LogHarvester: require('./lib/harvester.js').LogHarvester,\n  LogServer: require('./lib/server.js').LogServer,\n  WebServer: require('./lib/server.js').WebServer\n}","/home/travis/build/npmtest/node-npmtest-log.io/node_modules/log.io/lib/harvester.js":"// Generated by CoffeeScript 1.4.0\n\n/* Log.io Log Harvester\n\nWatches local files and sends new log message to server via TCP.\n\n# Sample configuration:\nconfig =\n  nodeName: 'my_server01'\n  logStreams:\n    web_server: [\n      '/var/log/nginx/access.log',\n      '/var/log/nginx/error.log'\n    ],\n  server:\n    host: '0.0.0.0',\n    port: 28777\n\n# Sends the following TCP messages to the server:\n\"+node|my_server01|web_server\\r\\n\"\n\"+bind|node|my_server01\\r\\n\"\n\"+log|web_server|my_server01|info|this is log messages\\r\\n\"\n\n# Usage:\nharvester = new LogHarvester config\nharvester.run()\n*/\n\n\n(function() {\n  var LogHarvester, LogStream, events, fs, net, winston,\n    __hasProp = {}.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    __slice = [].slice;\n\n  fs = require('fs');\n\n  net = require('net');\n\n  events = require('events');\n\n  winston = require('winston');\n\n  /*\n  LogStream is a group of local files paths.  It watches each file for\n  changes, extracts new log messages, and emits 'new_log' events.\n  */\n\n\n  LogStream = (function(_super) {\n\n    __extends(LogStream, _super);\n\n    function LogStream(name, paths, _log) {\n      this.name = name;\n      this.paths = paths;\n      this._log = _log;\n    }\n\n    LogStream.prototype.watch = function() {\n      var path, _i, _len, _ref;\n      this._log.info(\"Starting log stream: '\" + this.name + \"'\");\n      _ref = this.paths;\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        path = _ref[_i];\n        this._watchFile(path);\n      }\n      return this;\n    };\n\n    LogStream.prototype._watchFile = function(path) {\n      var currSize, watcher,\n        _this = this;\n      if (!fs.existsSync(path)) {\n        this._log.error(\"File doesn't exist: '\" + path + \"'\");\n        setTimeout((function() {\n          return _this._watchFile(path);\n        }), 1000);\n        return;\n      }\n      this._log.info(\"Watching file: '\" + path + \"'\");\n      currSize = fs.statSync(path).size;\n      return watcher = fs.watch(path, function(event, filename) {\n        if (event === 'rename') {\n          watcher.close();\n          _this._watchFile(path);\n        }\n        if (event === 'change') {\n          return fs.stat(path, function(err, stat) {\n            _this._readNewLogs(path, stat.size, currSize);\n            return currSize = stat.size;\n          });\n        }\n      });\n    };\n\n    LogStream.prototype._readNewLogs = function(path, curr, prev) {\n      var rstream,\n        _this = this;\n      if (curr < prev) {\n        return;\n      }\n      rstream = fs.createReadStream(path, {\n        encoding: 'utf8',\n        start: prev,\n        end: curr\n      });\n      return rstream.on('data', function(data) {\n        var line, lines, _i, _len, _results;\n        lines = data.split(\"\\n\");\n        _results = [];\n        for (_i = 0, _len = lines.length; _i < _len; _i++) {\n          line = lines[_i];\n          if (line) {\n            _results.push(_this.emit('new_log', line));\n          }\n        }\n        return _results;\n      });\n    };\n\n    return LogStream;\n\n  })(events.EventEmitter);\n\n  /*\n  LogHarvester creates LogStreams and opens a persistent TCP connection to the server.\n  \n  On startup it announces itself as Node with Stream associations.\n  Log messages are sent to the server via string-delimited TCP messages\n  */\n\n\n  LogHarvester = (function() {\n\n    function LogHarvester(config) {\n      var paths, s, _ref, _ref1;\n      this.nodeName = config.nodeName, this.server = config.server;\n      this.delim = (_ref = config.delimiter) != null ? _ref : '\\r\\n';\n      this._log = (_ref1 = config.logging) != null ? _ref1 : winston;\n      this.logStreams = (function() {\n        var _ref2, _results;\n        _ref2 = config.logStreams;\n        _results = [];\n        for (s in _ref2) {\n          paths = _ref2[s];\n          _results.push(new LogStream(s, paths, this._log));\n        }\n        return _results;\n      }).call(this);\n    }\n\n    LogHarvester.prototype.run = function() {\n      var _this = this;\n      this._connect();\n      return this.logStreams.forEach(function(stream) {\n        return stream.watch().on('new_log', function(msg) {\n          if (_this._connected) {\n            return _this._sendLog(stream, msg);\n          }\n        });\n      });\n    };\n\n    LogHarvester.prototype._connect = function() {\n      var _this = this;\n      this.socket = new net.Socket;\n      this.socket.on('error', function(error) {\n        _this._connected = false;\n        _this._log.error(\"Unable to connect server, trying again...\");\n        return setTimeout((function() {\n          return _this._connect();\n        }), 2000);\n      });\n      this._log.info(\"Connecting to server...\");\n      return this.socket.connect(this.server.port, this.server.host, function() {\n        _this._connected = true;\n        return _this._announce();\n      });\n    };\n\n    LogHarvester.prototype._sendLog = function(stream, msg) {\n      this._log.debug(\"Sending log: (\" + stream.name + \") \" + msg);\n      return this._send('+log', stream.name, this.nodeName, 'info', msg);\n    };\n\n    LogHarvester.prototype._announce = function() {\n      var l, snames;\n      snames = ((function() {\n        var _i, _len, _ref, _results;\n        _ref = this.logStreams;\n        _results = [];\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          l = _ref[_i];\n          _results.push(l.name);\n        }\n        return _results;\n      }).call(this)).join(\",\");\n      this._log.info(\"Announcing: \" + this.nodeName + \" (\" + snames + \")\");\n      this._send('+node', this.nodeName, snames);\n      return this._send('+bind', 'node', this.nodeName);\n    };\n\n    LogHarvester.prototype._send = function() {\n      var args, mtype;\n      mtype = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n      return this.socket.write(\"\" + mtype + \"|\" + (args.join('|')) + this.delim);\n    };\n\n    return LogHarvester;\n\n  })();\n\n  exports.LogHarvester = LogHarvester;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-log.io/node_modules/log.io/lib/server.js":"// Generated by CoffeeScript 1.4.0\n\n/* Log.io Log Server\n\nRelays inbound log messages to web clients\n\nLogServer receives log messages via TCP:\n\"+log|my_stream|my_server_host|info|this is a log message\\r\\n\"\n\nAnnounce a node, optionally with stream associations\n\"+node|my_server_host\\r\\n\"\n\"+node|my_server_host|my_stream1,my_stream2,my_stream3\\r\\n\"\n\nAnnounce a stream, optionally with node associations\n\"+stream|my_stream1\\r\\n\"\n\"+stream|my_stream1|my_server_host1,my_host_server2\\r\\n\"\n\nRemove a node or stream\n\"-node|my_server_host1\\r\\n\"\n\"-stream|stream2\\r\\n\"\n\nWebServer listens for events emitted by LogServer and\nforwards them to web clients via socket.io\n\n# Usage:\nlogServer = new LogServer port: 28777\nwebServer = new WebServer logServer, port: 28778\nwebServer.run()\n*/\n\n\n(function() {\n  var LogNode, LogServer, LogStream, WebServer, events, express, fs, http, https, io, net, winston, _LogObject,\n    __hasProp = {}.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    __slice = [].slice;\n\n  fs = require('fs');\n\n  net = require('net');\n\n  http = require('http');\n\n  https = require('https');\n\n  io = require('socket.io');\n\n  events = require('events');\n\n  winston = require('winston');\n\n  express = require('express');\n\n  _LogObject = (function() {\n\n    _LogObject.prototype._type = 'object';\n\n    _LogObject.prototype._pclass = function() {};\n\n    _LogObject.prototype._pcollection = function() {};\n\n    function _LogObject(logServer, name, _pairs) {\n      var pname, _i, _len;\n      this.logServer = logServer;\n      this.name = name;\n      if (_pairs == null) {\n        _pairs = [];\n      }\n      this.logServer.emit(\"add_\" + this._type, this);\n      this.pairs = {};\n      this.pclass = this._pclass();\n      this.pcollection = this._pcollection();\n      for (_i = 0, _len = _pairs.length; _i < _len; _i++) {\n        pname = _pairs[_i];\n        this.addPair(pname);\n      }\n    }\n\n    _LogObject.prototype.addPair = function(pname) {\n      var pair;\n      if (!(pair = this.pairs[pname])) {\n        if (!(pair = this.pcollection[pname])) {\n          pair = this.pcollection[pname] = new this.pclass(this.logServer, pname);\n        }\n        pair.pairs[this.name] = this;\n        this.pairs[pname] = pair;\n        return this.logServer.emit(\"add_\" + this._type + \"_pair\", this, pname);\n      }\n    };\n\n    _LogObject.prototype.remove = function() {\n      var name, p, _ref, _results;\n      this.logServer.emit(\"remove_\" + this._type, this);\n      _ref = this.pairs;\n      _results = [];\n      for (name in _ref) {\n        p = _ref[name];\n        _results.push(delete p.pairs[this.name]);\n      }\n      return _results;\n    };\n\n    _LogObject.prototype.toDict = function() {\n      var name, obj;\n      return {\n        name: this.name,\n        pairs: (function() {\n          var _ref, _results;\n          _ref = this.pairs;\n          _results = [];\n          for (name in _ref) {\n            obj = _ref[name];\n            _results.push(name);\n          }\n          return _results;\n        }).call(this)\n      };\n    };\n\n    return _LogObject;\n\n  })();\n\n  LogNode = (function(_super) {\n\n    __extends(LogNode, _super);\n\n    function LogNode() {\n      return LogNode.__super__.constructor.apply(this, arguments);\n    }\n\n    LogNode.prototype._type = 'node';\n\n    LogNode.prototype._pclass = function() {\n      return LogStream;\n    };\n\n    LogNode.prototype._pcollection = function() {\n      return this.logServer.logStreams;\n    };\n\n    return LogNode;\n\n  })(_LogObject);\n\n  LogStream = (function(_super) {\n\n    __extends(LogStream, _super);\n\n    function LogStream() {\n      return LogStream.__super__.constructor.apply(this, arguments);\n    }\n\n    LogStream.prototype._type = 'stream';\n\n    LogStream.prototype._pclass = function() {\n      return LogNode;\n    };\n\n    LogStream.prototype._pcollection = function() {\n      return this.logServer.logNodes;\n    };\n\n    return LogStream;\n\n  })(_LogObject);\n\n  /*\n  LogServer listens for TCP connections.  It parses & validates\n  inbound TCP messages, and emits events.\n  */\n\n\n  LogServer = (function(_super) {\n\n    __extends(LogServer, _super);\n\n    function LogServer(config) {\n      var _ref, _ref1;\n      if (config == null) {\n        config = {};\n      }\n      this._flush = __bind(this._flush, this);\n\n      this._receive = __bind(this._receive, this);\n\n      this.host = config.host, this.port = config.port;\n      this._log = (_ref = config.logging) != null ? _ref : winston;\n      this._delimiter = (_ref1 = config.delimiter) != null ? _ref1 : '\\r\\n';\n      this.logNodes = {};\n      this.logStreams = {};\n    }\n\n    LogServer.prototype.run = function() {\n      var _this = this;\n      this.listener = net.createServer(function(socket) {\n        socket._buffer = '';\n        socket.on('data', function(data) {\n          return _this._receive(data, socket);\n        });\n        socket.on('error', function() {\n          return _this._tearDown(socket);\n        });\n        return socket.on('close', function() {\n          return _this._tearDown(socket);\n        });\n      });\n      return this.listener.listen(this.port, this.host);\n    };\n\n    LogServer.prototype._tearDown = function(socket) {\n      this._log.error('Lost TCP connection...');\n      if (socket.node) {\n        this._removeNode(socket.node.name);\n        return delete socket.node;\n      }\n    };\n\n    LogServer.prototype._receive = function(data, socket) {\n      var part;\n      part = data.toString();\n      socket._buffer += part;\n      this._log.debug(\"Received TCP message: \" + part);\n      if (socket._buffer.indexOf(this._delimiter >= 0)) {\n        return this._flush(socket);\n      }\n    };\n\n    LogServer.prototype._flush = function(socket) {\n      var msg, msgs, _i, _j, _len, _ref, _results;\n      socket.pause();\n      _ref = socket._buffer.split(this._delimiter), msgs = 2 <= _ref.length ? __slice.call(_ref, 0, _i = _ref.length - 1) : (_i = 0, []), socket._buffer = _ref[_i++];\n      socket.resume();\n      _results = [];\n      for (_j = 0, _len = msgs.length; _j < _len; _j++) {\n        msg = msgs[_j];\n        _results.push(this._handle(socket, msg));\n      }\n      return _results;\n    };\n\n    LogServer.prototype._handle = function(socket, msg) {\n      var args, mtype, _ref;\n      this._log.debug(\"Handling message: \" + msg);\n      _ref = msg.split('|'), mtype = _ref[0], args = 2 <= _ref.length ? __slice.call(_ref, 1) : [];\n      switch (mtype) {\n        case '+log':\n          return this._newLog.apply(this, args);\n        case '+node':\n          return this._addNode.apply(this, args);\n        case '+stream':\n          return this._addStream.apply(this, args);\n        case '-node':\n          return this._removeNode.apply(this, args);\n        case '-stream':\n          return this._removeStream.apply(this, args);\n        case '+bind':\n          return this._bindNode.apply(this, [socket].concat(__slice.call(args)));\n        default:\n          return this._log.error(\"Invalid TCP message: \" + msg);\n      }\n    };\n\n    LogServer.prototype._addNode = function(nname, snames) {\n      if (snames == null) {\n        snames = '';\n      }\n      return this.__add(nname, snames, this.logNodes, LogNode, 'node');\n    };\n\n    LogServer.prototype._addStream = function(sname, nnames) {\n      if (nnames == null) {\n        nnames = '';\n      }\n      return this.__add(sname, nnames, this.logStreams, LogStream, 'stream');\n    };\n\n    LogServer.prototype._removeNode = function(nname) {\n      return this.__remove(nname, this.logNodes, 'node');\n    };\n\n    LogServer.prototype._removeStream = function(sname) {\n      return this.__remove(sname, this.logStreams, 'stream');\n    };\n\n    LogServer.prototype._newLog = function() {\n      var logLevel, message, nname, node, sname, stream;\n      sname = arguments[0], nname = arguments[1], logLevel = arguments[2], message = 4 <= arguments.length ? __slice.call(arguments, 3) : [];\n      message = message.join('|');\n      this._log.debug(\"Log message: (\" + sname + \", \" + nname + \", \" + logLevel + \") \" + message);\n      node = this.logNodes[nname] || this._addNode(nname, sname);\n      stream = this.logStreams[sname] || this._addStream(sname, nname);\n      return this.emit('new_log', stream, node, logLevel, message);\n    };\n\n    LogServer.prototype.__add = function(name, pnames, _collection, _objClass, objName) {\n      var obj, p, _i, _len, _results;\n      this._log.info(\"Adding \" + objName + \": \" + name + \" (\" + pnames + \")\");\n      pnames = pnames.split(',');\n      obj = _collection[name] = _collection[name] || new _objClass(this, name, pnames);\n      _results = [];\n      for (_i = 0, _len = pnames.length; _i < _len; _i++) {\n        p = pnames[_i];\n        if (!obj.pairs[p]) {\n          _results.push(obj.addPair(p));\n        }\n      }\n      return _results;\n    };\n\n    LogServer.prototype.__remove = function(name, _collection, objType) {\n      var obj;\n      if (obj = _collection[name]) {\n        this._log.info(\"Removing \" + objType + \": \" + name);\n        obj.remove();\n        return delete _collection[name];\n      }\n    };\n\n    LogServer.prototype._bindNode = function(socket, obj, nname) {\n      var node;\n      if (node = this.logNodes[nname]) {\n        this._log.info(\"Binding node '\" + nname + \"' to TCP socket\");\n        socket.node = node;\n        return this._ping(socket);\n      }\n    };\n\n    LogServer.prototype._ping = function(socket) {\n      var _this = this;\n      if (socket.node) {\n        socket.write('ping');\n        return setTimeout((function() {\n          return _this._ping(socket);\n        }), 2000);\n      }\n    };\n\n    return LogServer;\n\n  })(events.EventEmitter);\n\n  /*\n  WebServer relays LogServer events to web clients via socket.io.\n  */\n\n\n  WebServer = (function() {\n\n    function WebServer(logServer, config) {\n      var app, _ref, _ref1, _ref2;\n      this.logServer = logServer;\n      this.host = config.host, this.port = config.port, this.auth = config.auth;\n      _ref = this.logServer, this.logNodes = _ref.logNodes, this.logStreams = _ref.logStreams;\n      this.restrictSocket = (_ref1 = config.restrictSocket) != null ? _ref1 : '*:*';\n      this._log = (_ref2 = config.logging) != null ? _ref2 : winston;\n      app = this._buildServer(config);\n      this.http = this._createServer(config, app);\n    }\n\n    WebServer.prototype._buildServer = function(config) {\n      var app, ips, staticPath, _ref,\n        _this = this;\n      app = express();\n      if (this.auth != null) {\n        app.use(express.basicAuth(this.auth.user, this.auth.pass));\n      }\n      if (config.restrictHTTP) {\n        ips = new RegExp(config.restrictHTTP.join('|'));\n        app.all('/', function(req, res, next) {\n          if (!req.ip.match(ips)) {\n            return res.send(403, \"Your IP (\" + req.ip + \") is not allowed.\");\n          }\n          return next();\n        });\n      }\n      staticPath = (_ref = config.staticPath) != null ? _ref : __dirname + '/../';\n      return app.use(express[\"static\"](staticPath));\n    };\n\n    WebServer.prototype._createServer = function(config, app) {\n      if (config.ssl) {\n        return https.createServer({\n          key: fs.readFileSync(config.ssl.key),\n          cert: fs.readFileSync(config.ssl.cert)\n        }, app);\n      } else {\n        return http.createServer(app);\n      }\n    };\n\n    WebServer.prototype.run = function() {\n      var _emit, _on,\n        _this = this;\n      this._log.info('Starting Log.io Web Server...');\n      this.logServer.run();\n      io = io.listen(this.http.listen(this.port, this.host));\n      io.set('log level', 1);\n      io.set('origins', this.restrictSocket);\n      this.listener = io.sockets;\n      _on = function() {\n        var args, _ref;\n        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        return (_ref = _this.logServer).on.apply(_ref, args);\n      };\n      _emit = function(_event, msg) {\n        _this._log.debug(\"Relaying: \" + _event);\n        return _this.listener.emit(_event, msg);\n      };\n      _on('add_node', function(node) {\n        return _emit('add_node', node.toDict());\n      });\n      _on('add_stream', function(stream) {\n        return _emit('add_stream', stream.toDict());\n      });\n      _on('add_stream_pair', function(stream, nname) {\n        return _emit('add_pair', {\n          stream: stream.name,\n          node: nname\n        });\n      });\n      _on('add_node_pair', function(node, sname) {\n        return _emit('add_pair', {\n          stream: sname,\n          node: node.name\n        });\n      });\n      _on('remove_node', function(node) {\n        return _emit('remove_node', node.toDict());\n      });\n      _on('remove_stream', function(stream) {\n        return _emit('remove_stream', stream.toDict());\n      });\n      _on('new_log', function(stream, node, level, message) {\n        _emit('ping', {\n          stream: stream.name,\n          node: node.name\n        });\n        return _this.listener[\"in\"](\"\" + stream.name + \":\" + node.name).emit('new_log', {\n          stream: stream.name,\n          node: node.name,\n          level: level,\n          message: message\n        });\n      });\n      this.listener.on('connection', function(wclient) {\n        var n, node, s, stream, _ref, _ref1, _ref2, _ref3;\n        _ref = _this.logNodes;\n        for (n in _ref) {\n          node = _ref[n];\n          wclient.emit('add_node', node.toDict());\n        }\n        _ref1 = _this.logStreams;\n        for (s in _ref1) {\n          stream = _ref1[s];\n          wclient.emit('add_stream', stream.toDict());\n        }\n        _ref2 = _this.logNodes;\n        for (n in _ref2) {\n          node = _ref2[n];\n          _ref3 = node.pairs;\n          for (s in _ref3) {\n            stream = _ref3[s];\n            wclient.emit('add_pair', {\n              stream: s,\n              node: n\n            });\n          }\n        }\n        wclient.emit('initialized');\n        wclient.on('watch', function(pid) {\n          return wclient.join(pid);\n        });\n        return wclient.on('unwatch', function(pid) {\n          return wclient.leave(pid);\n        });\n      });\n      return this._log.info('Server started, listening...');\n    };\n\n    return WebServer;\n\n  })();\n\n  exports.LogServer = LogServer;\n\n  exports.WebServer = WebServer;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-log.io/node_modules/log.io/lib/client.js":"// Generated by CoffeeScript 1.4.0\n\n/* Log.io Web Client\n\nListens to server for new log messages, renders them to screen \"widgets\".\n\n# Usage:\nwclient = new WebClient io, host: 'http://localhost:28778'\nscreen = wclient.createScreen\nstream = wclient.logStreams.at 0\nnode = wclient.logNodes.at 0\nscreen.addPair stream, node\nscreen.on 'new_log', (stream, node, level, message) ->\n*/\n\n\n(function() {\n  var $, ClientApplication, ColorManager, LogControlPanel, LogMessage, LogMessages, LogNode, LogNodes, LogScreen, LogScreenView, LogScreens, LogScreensPanel, LogStatsView, LogStream, LogStreams, MESSAGE_CAP, ObjectControls, ObjectGroupControls, ObjectGroupHeader, ObjectItemControls, WebClient, backbone, colors, io, templates, _, _LogObject, _LogObjects,\n    __hasProp = {}.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    __slice = [].slice,\n    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\n  if (process.browser) {\n    $ = require('jquery-browserify');\n  } else {\n    $ = eval(\"require('jquery')\");\n  }\n\n  backbone = require('backbone');\n\n  backbone.$ = $;\n\n  io = require('socket.io-client');\n\n  _ = require('underscore');\n\n  templates = require('./templates');\n\n  MESSAGE_CAP = 5000;\n\n  /*\n  ColorManager acts as a circular queue for color values.\n  Every new Stream or Node is assigned a color value on instantiation.\n  */\n\n\n  ColorManager = (function() {\n\n    ColorManager.prototype._max = 20;\n\n    function ColorManager(_index) {\n      this._index = _index != null ? _index : 1;\n    }\n\n    ColorManager.prototype.next = function() {\n      if (this._index === this._max) {\n        this._index = 1;\n      }\n      return this._index++;\n    };\n\n    return ColorManager;\n\n  })();\n\n  colors = new ColorManager;\n\n  /*\n  Backbone models are used to represent nodes and streams.  When nodes\n  go offline, their LogNode model is destroyed, along with their\n  stream assocations.\n  */\n\n\n  _LogObject = (function(_super) {\n\n    __extends(_LogObject, _super);\n\n    _LogObject.prototype.idAttribute = 'name';\n\n    _LogObject.prototype._pclass = function() {\n      return new _LogObjects;\n    };\n\n    _LogObject.prototype.sync = function() {\n      var args;\n      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n    };\n\n    function _LogObject() {\n      var args;\n      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n      _LogObject.__super__.constructor.apply(this, args);\n      this.screens = new LogScreens;\n      this.pairs = this._pclass();\n      this.color = colors.next();\n    }\n\n    return _LogObject;\n\n  })(backbone.Model);\n\n  _LogObjects = (function(_super) {\n\n    __extends(_LogObjects, _super);\n\n    function _LogObjects() {\n      return _LogObjects.__super__.constructor.apply(this, arguments);\n    }\n\n    _LogObjects.prototype.model = _LogObject;\n\n    _LogObjects.prototype.comparator = function(obj) {\n      return obj.get('name');\n    };\n\n    return _LogObjects;\n\n  })(backbone.Collection);\n\n  LogStream = (function(_super) {\n\n    __extends(LogStream, _super);\n\n    function LogStream() {\n      return LogStream.__super__.constructor.apply(this, arguments);\n    }\n\n    LogStream.prototype._pclass = function() {\n      return new LogNodes;\n    };\n\n    return LogStream;\n\n  })(_LogObject);\n\n  LogStreams = (function(_super) {\n\n    __extends(LogStreams, _super);\n\n    function LogStreams() {\n      return LogStreams.__super__.constructor.apply(this, arguments);\n    }\n\n    LogStreams.prototype.model = LogStream;\n\n    return LogStreams;\n\n  })(_LogObjects);\n\n  LogNode = (function(_super) {\n\n    __extends(LogNode, _super);\n\n    function LogNode() {\n      return LogNode.__super__.constructor.apply(this, arguments);\n    }\n\n    LogNode.prototype._pclass = function() {\n      return new LogStreams;\n    };\n\n    return LogNode;\n\n  })(_LogObject);\n\n  LogNodes = (function(_super) {\n\n    __extends(LogNodes, _super);\n\n    function LogNodes() {\n      return LogNodes.__super__.constructor.apply(this, arguments);\n    }\n\n    LogNodes.prototype.model = LogNode;\n\n    return LogNodes;\n\n  })(_LogObjects);\n\n  LogMessage = (function(_super) {\n    var RCLOSE, ROPEN;\n\n    __extends(LogMessage, _super);\n\n    function LogMessage() {\n      return LogMessage.__super__.constructor.apply(this, arguments);\n    }\n\n    ROPEN = new RegExp('<', 'ig');\n\n    RCLOSE = new RegExp('>', 'ig');\n\n    LogMessage.prototype.render_message = function() {\n      return this.get('message').replace(ROPEN, '&lt;').replace(RCLOSE, '&gt;');\n    };\n\n    return LogMessage;\n\n  })(backbone.Model);\n\n  LogMessages = (function(_super) {\n\n    __extends(LogMessages, _super);\n\n    LogMessages.prototype.model = LogMessage;\n\n    function LogMessages() {\n      var args;\n      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n      this._capped = __bind(this._capped, this);\n\n      LogMessages.__super__.constructor.apply(this, args);\n      this.on('add', this._capped);\n    }\n\n    LogMessages.prototype._capped = function() {\n      if (this.length > MESSAGE_CAP) {\n        return this.remove(this.at(this.length - MESSAGE_CAP));\n      }\n    };\n\n    return LogMessages;\n\n  })(backbone.Collection);\n\n  /*\n  LogScreen models maintain state for screen widgets in the UI.\n  When (Stream, Node) pairs are associated with a screen, the pair ID\n  is stored on the model.  It uses pair ID instead of models themselves\n  in case a node goes offline, and a new LogNode model is created.\n  */\n\n\n  LogScreen = (function(_super) {\n\n    __extends(LogScreen, _super);\n\n    LogScreen.prototype.idAttribute = null;\n\n    LogScreen.prototype.defaults = function() {\n      return {\n        pairIds: []\n      };\n    };\n\n    function LogScreen() {\n      var args;\n      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n      LogScreen.__super__.constructor.apply(this, args);\n      this.logMessages = new LogMessages;\n    }\n\n    LogScreen.prototype.addPair = function(stream, node) {\n      var pairIds, pid;\n      pairIds = this.get('pairIds');\n      pid = this._pid(stream, node);\n      if (__indexOf.call(pairIds, pid) < 0) {\n        pairIds.push(pid);\n      }\n      stream.trigger('lwatch', node, this);\n      node.trigger('lwatch', stream, this);\n      stream.screens.update(this);\n      node.screens.update(this);\n      return this.collection.trigger('addPair');\n    };\n\n    LogScreen.prototype.removePair = function(stream, node) {\n      var p, pairIds, pid;\n      pairIds = this.get('pairIds');\n      pid = this._pid(stream, node);\n      this.set('pairIds', (function() {\n        var _i, _len, _results;\n        _results = [];\n        for (_i = 0, _len = pairIds.length; _i < _len; _i++) {\n          p = pairIds[_i];\n          if (p !== pid) {\n            _results.push(p);\n          }\n        }\n        return _results;\n      })());\n      stream.trigger('lunwatch', node, this);\n      node.trigger('lunwatch', stream, this);\n      stream.screens.remove(this);\n      node.screens.remove(this);\n      return this.collection.trigger('removePair');\n    };\n\n    LogScreen.prototype.hasPair = function(stream, node) {\n      var pid;\n      pid = this._pid(stream, node);\n      return __indexOf.call(this.get('pairIds'), pid) >= 0;\n    };\n\n    LogScreen.prototype._pid = function(stream, node) {\n      return \"\" + stream.id + \":\" + node.id;\n    };\n\n    LogScreen.prototype.isActive = function(object, getPair) {\n      var _this = this;\n      if (!object.pairs.length) {\n        return false;\n      }\n      return object.pairs.every(function(item) {\n        var node, stream, _ref;\n        _ref = getPair(object, item), stream = _ref[0], node = _ref[1];\n        return _this.hasPair(stream, node);\n      });\n    };\n\n    return LogScreen;\n\n  })(backbone.Model);\n\n  LogScreens = (function(_super) {\n\n    __extends(LogScreens, _super);\n\n    function LogScreens() {\n      return LogScreens.__super__.constructor.apply(this, arguments);\n    }\n\n    LogScreens.prototype.model = LogScreen;\n\n    return LogScreens;\n\n  })(backbone.Collection);\n\n  /*\n  WebClient listens for log messages and stream/node announcements\n  from the server via socket.io.  It manipulates state in LogNodes &\n  LogStreams collections, which triggers view events.\n  */\n\n\n  WebClient = (function() {\n\n    function WebClient(opts, localStorage) {\n      var _on,\n        _this = this;\n      if (opts == null) {\n        opts = {\n          host: '',\n          secure: false\n        };\n      }\n      this.localStorage = localStorage != null ? localStorage : {};\n      this._disconnect = __bind(this._disconnect, this);\n\n      this._ping = __bind(this._ping, this);\n\n      this._newLog = __bind(this._newLog, this);\n\n      this._addPair = __bind(this._addPair, this);\n\n      this._removeStream = __bind(this._removeStream, this);\n\n      this._removeNode = __bind(this._removeNode, this);\n\n      this._addStream = __bind(this._addStream, this);\n\n      this._addNode = __bind(this._addNode, this);\n\n      this._initScreens = __bind(this._initScreens, this);\n\n      this.stats = {\n        nodes: 0,\n        streams: 0,\n        messages: 0,\n        start: new Date().getTime()\n      };\n      this.logNodes = new LogNodes;\n      this.logStreams = new LogStreams;\n      this.logScreens = new LogScreens;\n      this.app = new ClientApplication({\n        logNodes: this.logNodes,\n        logStreams: this.logStreams,\n        logScreens: this.logScreens,\n        webClient: this\n      });\n      this.app.render();\n      this._initScreens();\n      this.socket = io.connect(opts.host, {\n        secure: opts.secure\n      });\n      _on = function() {\n        var args, _ref;\n        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        return (_ref = _this.socket).on.apply(_ref, args);\n      };\n      _on('add_node', this._addNode);\n      _on('add_stream', this._addStream);\n      _on('remove_node', this._removeNode);\n      _on('remove_stream', this._removeStream);\n      _on('add_pair', this._addPair);\n      _on('new_log', this._newLog);\n      _on('ping', this._ping);\n      _on('disconnect', this._disconnect);\n    }\n\n    WebClient.prototype._initScreens = function() {\n      var screen, screenCache, screens, _i, _len, _results,\n        _this = this;\n      this.logScreens.on('add remove addPair removePair', function() {\n        return _this.localStorage['logScreens'] = JSON.stringify(_this.logScreens.toJSON());\n      });\n      screenCache = this.localStorage['logScreens'];\n      screens = screenCache ? JSON.parse(screenCache) : [\n        {\n          name: 'Screen1'\n        }\n      ];\n      _results = [];\n      for (_i = 0, _len = screens.length; _i < _len; _i++) {\n        screen = screens[_i];\n        _results.push(this.logScreens.add(new this.logScreens.model(screen)));\n      }\n      return _results;\n    };\n\n    WebClient.prototype._addNode = function(node) {\n      this.logNodes.add(node);\n      return this.stats.nodes++;\n    };\n\n    WebClient.prototype._addStream = function(stream) {\n      var _this = this;\n      this.logStreams.add(stream);\n      this.stats.streams++;\n      stream = this.logStreams.get(stream.name);\n      stream.on('lwatch', function(node, screen) {\n        return _this.socket.emit('watch', screen._pid(stream, node));\n      });\n      return stream.on('lunwatch', function(node, screen) {\n        return _this.socket.emit('unwatch', screen._pid(stream, node));\n      });\n    };\n\n    WebClient.prototype._removeNode = function(node) {\n      var _ref;\n      if ((_ref = this.logNodes.get(node.name)) != null) {\n        _ref.destroy();\n      }\n      return this.stats.nodes--;\n    };\n\n    WebClient.prototype._removeStream = function(stream) {\n      var _ref;\n      if ((_ref = this.logStreams.get(stream.name)) != null) {\n        _ref.destroy();\n      }\n      return this.stats.streams--;\n    };\n\n    WebClient.prototype._addPair = function(p) {\n      var node, stream;\n      stream = this.logStreams.get(p.stream);\n      node = this.logNodes.get(p.node);\n      stream.pairs.add(node);\n      node.pairs.add(stream);\n      return this.logScreens.each(function(screen) {\n        if (screen.hasPair(stream, node)) {\n          return screen.addPair(stream, node);\n        }\n      });\n    };\n\n    WebClient.prototype._newLog = function(msg) {\n      var level, message, node, stream;\n      stream = msg.stream, node = msg.node, level = msg.level, message = msg.message;\n      stream = this.logStreams.get(stream);\n      node = this.logNodes.get(node);\n      return this.logScreens.each(function(screen) {\n        if (screen.hasPair(stream, node)) {\n          return screen.trigger('new_log', new LogMessage({\n            stream: stream,\n            node: node,\n            level: level,\n            message: message\n          }));\n        }\n      });\n    };\n\n    WebClient.prototype._ping = function(msg) {\n      var node, stream;\n      stream = msg.stream, node = msg.node;\n      stream = this.logStreams.get(stream);\n      node = this.logNodes.get(node);\n      if (stream) {\n        stream.trigger('ping', node);\n      }\n      if (node) {\n        node.trigger('ping', stream);\n      }\n      return this.stats.messages++;\n    };\n\n    WebClient.prototype._disconnect = function() {\n      this.logNodes.reset();\n      this.logStreams.reset();\n      this.stats.nodes = 0;\n      return this.stats.streams = 0;\n    };\n\n    WebClient.prototype.createScreen = function(sname) {\n      var screen;\n      screen = new LogScreen({\n        name: sname\n      });\n      this.logScreens.add(screen);\n      return screen;\n    };\n\n    return WebClient;\n\n  })();\n\n  /*\n  Backbone views are used to manage the UI components,\n  including the list of log nodes and screen panels.\n  \n  # View heirarchy:\n  ClientApplication\n    LogControlPanel\n      ObjectControls\n        ObjectGroupControls\n          ObjectItemControls\n    LogScreenPanel\n      LogScreenView\n      LogStatsView\n  \n  TODO(msmathers): Build templates, fill out render() methods\n  */\n\n\n  ClientApplication = (function(_super) {\n\n    __extends(ClientApplication, _super);\n\n    function ClientApplication() {\n      this._resize = __bind(this._resize, this);\n      return ClientApplication.__super__.constructor.apply(this, arguments);\n    }\n\n    ClientApplication.prototype.el = '#web_client';\n\n    ClientApplication.prototype.template = _.template(templates.clientApplication);\n\n    ClientApplication.prototype.initialize = function(opts) {\n      this.logNodes = opts.logNodes, this.logStreams = opts.logStreams, this.logScreens = opts.logScreens, this.webClient = opts.webClient;\n      this.controls = new LogControlPanel({\n        logNodes: this.logNodes,\n        logStreams: this.logStreams,\n        logScreens: this.logScreens\n      });\n      this.screens = new LogScreensPanel({\n        logScreens: this.logScreens,\n        webClient: this.webClient\n      });\n      if (typeof window !== \"undefined\" && window !== null) {\n        $(window).resize(this._resize);\n      }\n      return this.listenTo(this.logScreens, 'add remove', this._resize);\n    };\n\n    ClientApplication.prototype._resize = function() {\n      var width;\n      if (!(typeof window !== \"undefined\" && window !== null)) {\n        return;\n      }\n      width = $(window).width() - this.$el.find(\"#log_controls\").width();\n      return this.$el.find(\"#log_screens\").width(width);\n    };\n\n    ClientApplication.prototype.render = function() {\n      this.$el.html(this.template());\n      this.$el.append(this.controls.render().el);\n      this.$el.append(this.screens.render().el);\n      this._resize();\n      return this;\n    };\n\n    return ClientApplication;\n\n  })(backbone.View);\n\n  LogControlPanel = (function(_super) {\n\n    __extends(LogControlPanel, _super);\n\n    function LogControlPanel() {\n      this._toggleMode = __bind(this._toggleMode, this);\n      return LogControlPanel.__super__.constructor.apply(this, arguments);\n    }\n\n    LogControlPanel.prototype.id = 'log_controls';\n\n    LogControlPanel.prototype.template = _.template(templates.logControlPanel);\n\n    LogControlPanel.prototype.initialize = function(opts) {\n      this.logNodes = opts.logNodes, this.logStreams = opts.logStreams, this.logScreens = opts.logScreens;\n      this.streams = new ObjectControls({\n        objects: this.logStreams,\n        logScreens: this.logScreens,\n        getPair: function(object, item) {\n          return [object, item];\n        },\n        id: 'log_control_streams'\n      });\n      return this.nodes = new ObjectControls({\n        objects: this.logNodes,\n        logScreens: this.logScreens,\n        getPair: function(object, item) {\n          return [item, object];\n        },\n        id: 'log_control_nodes',\n        attributes: {\n          style: 'display: none'\n        }\n      });\n    };\n\n    LogControlPanel.prototype.events = {\n      \"click a.select_mode\": \"_toggleMode\"\n    };\n\n    LogControlPanel.prototype._toggleMode = function(e) {\n      var target, tid;\n      target = $(e.currentTarget);\n      target.addClass('active').siblings().removeClass('active');\n      tid = target.attr('href');\n      this.$el.find(tid).show().siblings('.object_controls').hide();\n      return false;\n    };\n\n    LogControlPanel.prototype.render = function() {\n      this.$el.html(this.template());\n      this.$el.append(this.streams.render().el);\n      this.$el.append(this.nodes.render().el);\n      return this;\n    };\n\n    return LogControlPanel;\n\n  })(backbone.View);\n\n  ObjectControls = (function(_super) {\n\n    __extends(ObjectControls, _super);\n\n    function ObjectControls() {\n      this._resize = __bind(this._resize, this);\n\n      this._filter = __bind(this._filter, this);\n\n      this._addObject = __bind(this._addObject, this);\n      return ObjectControls.__super__.constructor.apply(this, arguments);\n    }\n\n    ObjectControls.prototype.className = 'object_controls';\n\n    ObjectControls.prototype.template = _.template(templates.objectControls);\n\n    ObjectControls.prototype.initialize = function(opts) {\n      var _this = this;\n      this.objects = opts.objects, this.getPair = opts.getPair, this.logScreens = opts.logScreens;\n      this.listenTo(this.objects, 'add', this._addObject);\n      this.listenTo(this.objects, 'reset', function() {\n        return _this.render();\n      });\n      if (typeof window !== \"undefined\" && window !== null) {\n        $(window).resize(this._resize);\n      }\n      return this.filter = null;\n    };\n\n    ObjectControls.prototype._addObject = function(obj) {\n      return this._insertObject(new ObjectGroupControls({\n        object: obj,\n        getPair: this.getPair,\n        logScreens: this.logScreens\n      }));\n    };\n\n    ObjectControls.prototype._insertObject = function(view) {\n      var index;\n      if (this.filter) {\n        view._filter(this.filter);\n      }\n      view.render();\n      index = this.objects.indexOf(view.object);\n      if (index > 0) {\n        return view.$el.insertAfter(this.$el.find(\"div.groups div.group:eq(\" + (index - 1) + \")\"));\n      } else {\n        return this.$el.find(\"div.groups\").prepend(view.el);\n      }\n    };\n\n    ObjectControls.prototype._filter = function(e) {\n      var filter, input;\n      input = $(e.currentTarget);\n      filter = input.val();\n      this.filter = filter ? new RegExp(\"(\" + filter + \")\", 'ig') : null;\n      return this.objects.trigger('ui_filter', this.filter);\n    };\n\n    ObjectControls.prototype._resize = function() {\n      var height;\n      if (!(typeof window !== \"undefined\" && window !== null)) {\n        return;\n      }\n      height = $(window).height();\n      return this.$el.find(\".groups\").height(height - 80);\n    };\n\n    ObjectControls.prototype.render = function() {\n      this.$el.html(this.template({\n        title: this.id\n      }));\n      this.$el.find('.filter').keyup(this._filter);\n      this._resize();\n      return this;\n    };\n\n    return ObjectControls;\n\n  })(backbone.View);\n\n  ObjectGroupControls = (function(_super) {\n\n    __extends(ObjectGroupControls, _super);\n\n    function ObjectGroupControls() {\n      this._addItem = __bind(this._addItem, this);\n\n      this._filter = __bind(this._filter, this);\n      return ObjectGroupControls.__super__.constructor.apply(this, arguments);\n    }\n\n    ObjectGroupControls.prototype.className = 'group';\n\n    ObjectGroupControls.prototype.template = _.template(templates.objectGroupControls);\n\n    ObjectGroupControls.prototype.initialize = function(opts) {\n      var _this = this;\n      this.object = opts.object, this.getPair = opts.getPair, this.logScreens = opts.logScreens;\n      this.object.pairs.each(this._addItem);\n      this.listenTo(this.object.pairs, 'add', this._addItem);\n      this.listenTo(this.object, 'destroy', function() {\n        return _this.remove();\n      });\n      this.listenTo(this.object.collection, 'ui_filter', this._filter);\n      this.header_view = new ObjectGroupHeader({\n        object: this.object,\n        getPair: this.getPair,\n        logScreens: this.logScreens\n      });\n      return this.header_view.render();\n    };\n\n    ObjectGroupControls.prototype._filter = function(filter) {\n      if (filter && !this.object.get('name').match(filter)) {\n        return this.$el.hide();\n      } else {\n        return this.$el.show();\n      }\n    };\n\n    ObjectGroupControls.prototype._addItem = function(pair) {\n      return this._insertItem(new ObjectItemControls({\n        item: pair,\n        getPair: this.getPair,\n        object: this.object,\n        logScreens: this.logScreens\n      }));\n    };\n\n    ObjectGroupControls.prototype._insertItem = function(view) {\n      var index;\n      view.render();\n      index = this.object.pairs.indexOf(view.item);\n      if (index > 0) {\n        return view.$el.insertAfter(this.$el.find(\"div.items div.item:eq(\" + (index - 1) + \")\"));\n      } else {\n        return this.$el.find(\"div.items\").prepend(view.el);\n      }\n    };\n\n    ObjectGroupControls.prototype.render = function() {\n      this.$el.html(this.template);\n      this.$el.prepend(this.header_view.el);\n      return this;\n    };\n\n    return ObjectGroupControls;\n\n  })(backbone.View);\n\n  ObjectGroupHeader = (function(_super) {\n\n    __extends(ObjectGroupHeader, _super);\n\n    function ObjectGroupHeader() {\n      this.render = __bind(this.render, this);\n\n      this._ping = __bind(this._ping, this);\n\n      this._toggleScreen = __bind(this._toggleScreen, this);\n      return ObjectGroupHeader.__super__.constructor.apply(this, arguments);\n    }\n\n    ObjectGroupHeader.prototype.className = 'header';\n\n    ObjectGroupHeader.prototype.template = _.template(templates.objectGroupHeader);\n\n    ObjectGroupHeader.prototype.initialize = function(opts) {\n      var _this = this;\n      this.object = opts.object, this.getPair = opts.getPair, this.logScreens = opts.logScreens;\n      this.listenTo(this.logScreens, 'add remove', function() {\n        return _this.render();\n      });\n      this.listenTo(this.object, 'destroy', function() {\n        return _this.remove();\n      });\n      this.listenTo(this.object, 'lwatch lunwatch', function() {\n        return _this.render();\n      });\n      this.listenTo(this.object.collection, 'add', function() {\n        return _this.render();\n      });\n      return this.listenTo(this.object, 'ping', this._ping);\n    };\n\n    ObjectGroupHeader.prototype.events = {\n      \"click input\": \"_toggleScreen\"\n    };\n\n    ObjectGroupHeader.prototype._toggleScreen = function(e) {\n      var checkbox, screen, screen_id,\n        _this = this;\n      checkbox = $(e.currentTarget);\n      screen_id = checkbox.attr('title').replace(/screen-/ig, '');\n      screen = this.logScreens.get(screen_id);\n      return this.object.pairs.forEach(function(item) {\n        var node, stream, _ref;\n        _ref = _this.getPair(_this.object, item), stream = _ref[0], node = _ref[1];\n        if (checkbox.is(':checked')) {\n          return screen.addPair(stream, node);\n        } else {\n          return screen.removePair(stream, node);\n        }\n      });\n    };\n\n    ObjectGroupHeader.prototype._ping = function() {\n      var _this = this;\n      this.diode.addClass('ping');\n      return setTimeout((function() {\n        return _this.diode.removeClass('ping');\n      }), 20);\n    };\n\n    ObjectGroupHeader.prototype.render = function() {\n      this.$el.html(this.template({\n        getPair: this.getPair,\n        object: this.object,\n        logScreens: this.logScreens\n      }));\n      this.diode = this.$el.find('.diode');\n      return this;\n    };\n\n    return ObjectGroupHeader;\n\n  })(backbone.View);\n\n  ObjectItemControls = (function(_super) {\n\n    __extends(ObjectItemControls, _super);\n\n    function ObjectItemControls() {\n      this._ping = __bind(this._ping, this);\n\n      this._toggleScreen = __bind(this._toggleScreen, this);\n      return ObjectItemControls.__super__.constructor.apply(this, arguments);\n    }\n\n    ObjectItemControls.prototype.className = 'item';\n\n    ObjectItemControls.prototype.template = _.template(templates.objectItemControls);\n\n    ObjectItemControls.prototype.initialize = function(opts) {\n      var _ref,\n        _this = this;\n      this.item = opts.item, this.object = opts.object, this.logScreens = opts.logScreens;\n      _ref = opts.getPair(this.object, this.item), this.stream = _ref[0], this.node = _ref[1];\n      this.listenTo(this.logScreens, 'add remove', function() {\n        return _this.render();\n      });\n      this.listenTo(this.item, 'destroy', function() {\n        return _this.remove();\n      });\n      this.listenTo(this.stream, 'lwatch lunwatch', function() {\n        return _this.render();\n      });\n      return this.listenTo(this.item, 'ping', this._ping);\n    };\n\n    ObjectItemControls.prototype.events = {\n      \"click input\": \"_toggleScreen\"\n    };\n\n    ObjectItemControls.prototype._toggleScreen = function(e) {\n      var checkbox, screen, screen_id;\n      checkbox = $(e.currentTarget);\n      screen_id = checkbox.attr('title').replace(/screen-/ig, '');\n      screen = this.logScreens.get(screen_id);\n      if (checkbox.is(':checked')) {\n        return screen.addPair(this.stream, this.node);\n      } else {\n        return screen.removePair(this.stream, this.node);\n      }\n    };\n\n    ObjectItemControls.prototype._ping = function(object) {\n      var _this = this;\n      if (object === this.object) {\n        this.diode.addClass('ping');\n        return setTimeout((function() {\n          return _this.diode.removeClass('ping');\n        }), 20);\n      }\n    };\n\n    ObjectItemControls.prototype.render = function() {\n      this.$el.html(this.template({\n        item: this.item,\n        stream: this.stream,\n        node: this.node,\n        logScreens: this.logScreens\n      }));\n      this.diode = this.$el.find('.diode');\n      return this;\n    };\n\n    return ObjectItemControls;\n\n  })(backbone.View);\n\n  LogScreensPanel = (function(_super) {\n\n    __extends(LogScreensPanel, _super);\n\n    function LogScreensPanel() {\n      this._resize = __bind(this._resize, this);\n\n      this._addLogScreen = __bind(this._addLogScreen, this);\n      return LogScreensPanel.__super__.constructor.apply(this, arguments);\n    }\n\n    LogScreensPanel.prototype.template = _.template(templates.logScreensPanel);\n\n    LogScreensPanel.prototype.id = 'log_screens';\n\n    LogScreensPanel.prototype.initialize = function(opts) {\n      this.logScreens = opts.logScreens, this.webClient = opts.webClient;\n      this.listenTo(this.logScreens, 'add', this._addLogScreen);\n      this.listenTo(this.logScreens, 'add remove', this._resize);\n      if (typeof window !== \"undefined\" && window !== null) {\n        $(window).resize(this._resize);\n      }\n      return this.statsView = new LogStatsView({\n        stats: this.webClient.stats\n      });\n    };\n\n    LogScreensPanel.prototype.events = {\n      \"click #new_screen_button\": \"_newScreen\"\n    };\n\n    LogScreensPanel.prototype._newScreen = function(e) {\n      this.logScreens.add(new this.logScreens.model({\n        name: 'Screen1'\n      }));\n      return false;\n    };\n\n    LogScreensPanel.prototype._addLogScreen = function(screen) {\n      var view;\n      view = new LogScreenView({\n        logScreens: this.logScreens,\n        logScreen: screen\n      });\n      this.$el.find(\"div.log_screens\").append(view.render().el);\n      return false;\n    };\n\n    LogScreensPanel.prototype._resize = function() {\n      var height, lscreens;\n      if (!(typeof window !== \"undefined\" && window !== null)) {\n        return;\n      }\n      lscreens = this.logScreens;\n      if (lscreens.length) {\n        height = $(window).height() - this.$el.find(\"div.status_bar\").height() - 10;\n        return this.$el.find(\".log_screen .messages\").each(function() {\n          return $(this).height((height / lscreens.length) - 12);\n        });\n      }\n    };\n\n    LogScreensPanel.prototype.render = function() {\n      this.$el.html(this.template());\n      this.$el.find('.stats').append(this.statsView.render().el);\n      this._resize();\n      return this;\n    };\n\n    return LogScreensPanel;\n\n  })(backbone.View);\n\n  LogScreenView = (function(_super) {\n\n    __extends(LogScreenView, _super);\n\n    function LogScreenView() {\n      this._renderMessages = __bind(this._renderMessages, this);\n\n      this._renderNewLog = __bind(this._renderNewLog, this);\n\n      this._recordScroll = __bind(this._recordScroll, this);\n\n      this._addNewLogMessage = __bind(this._addNewLogMessage, this);\n\n      this._filter = __bind(this._filter, this);\n\n      this.__filter = __bind(this.__filter, this);\n\n      this._clear = __bind(this._clear, this);\n\n      this._close = __bind(this._close, this);\n      return LogScreenView.__super__.constructor.apply(this, arguments);\n    }\n\n    LogScreenView.prototype.className = 'log_screen';\n\n    LogScreenView.prototype.template = _.template(templates.logScreenView);\n\n    LogScreenView.prototype.logTemplate = _.template(templates.logMessage);\n\n    LogScreenView.prototype.initialize = function(opts) {\n      var _this = this;\n      this.logScreen = opts.logScreen, this.logScreens = opts.logScreens;\n      this.listenTo(this.logScreen, 'destroy', function() {\n        return _this.remove();\n      });\n      this.listenTo(this.logScreen, 'new_log', this._addNewLogMessage);\n      this.forceScroll = true;\n      return this.filter = null;\n    };\n\n    LogScreenView.prototype.events = {\n      \"click .controls .close\": \"_close\",\n      \"click .controls .clear\": \"_clear\"\n    };\n\n    LogScreenView.prototype._close = function() {\n      this.logScreen.logMessages.reset();\n      this.logScreen.destroy();\n      return false;\n    };\n\n    LogScreenView.prototype._clear = function() {\n      this.logScreen.logMessages.reset();\n      this._renderMessages();\n      return false;\n    };\n\n    LogScreenView.prototype.__filter = function(e) {\n      var input, wait, _filter_buffer,\n        _this = this;\n      input = $(e.currentTarget);\n      _filter_buffer = input.val();\n      wait = function() {\n        if (_filter_buffer === input.val()) {\n          return _this._filter(_filter_buffer);\n        }\n      };\n      return setTimeout(wait, 350);\n    };\n\n    LogScreenView.prototype._filter = function(filter) {\n      this.filter = filter ? new RegExp(\"(\" + filter + \")\", 'ig') : null;\n      return this._renderMessages();\n    };\n\n    LogScreenView.prototype._addNewLogMessage = function(lmessage) {\n      this.logScreen.logMessages.add(lmessage);\n      return this._renderNewLog(lmessage);\n    };\n\n    LogScreenView.prototype._recordScroll = function(e) {\n      var msgs;\n      msgs = this.$el.find('.messages');\n      return this.forceScroll = (msgs.height() + msgs[0].scrollTop) === msgs[0].scrollHeight;\n    };\n\n    LogScreenView.prototype._renderNewLog = function(lmessage) {\n      var msg, _msg;\n      _msg = lmessage.get('message');\n      msg = lmessage.render_message();\n      if (this.filter) {\n        msg = _msg.match(this.filter) ? msg.replace(this.filter, '<span class=\"highlight\">$1</span>') : null;\n      }\n      if (msg) {\n        this.msgs.append(this.logTemplate({\n          lmessage: lmessage,\n          msg: msg\n        }));\n        if (this.forceScroll) {\n          return this.$el.find('.messages')[0].scrollTop = this.$el.find('.messages')[0].scrollHeight;\n        }\n      }\n    };\n\n    LogScreenView.prototype._renderMessages = function() {\n      this.msgs.html('');\n      return this.logScreen.logMessages.forEach(this._renderNewLog);\n    };\n\n    LogScreenView.prototype.render = function() {\n      this.$el.html(this.template({\n        logScreens: this.logScreens\n      }));\n      this.$el.find('.messages').scroll(this._recordScroll);\n      this.$el.find('.controls .filter input').keyup(this.__filter);\n      this.msgs = this.$el.find('.msg');\n      this._renderMessages();\n      return this;\n    };\n\n    return LogScreenView;\n\n  })(backbone.View);\n\n  LogStatsView = (function(_super) {\n\n    __extends(LogStatsView, _super);\n\n    function LogStatsView() {\n      return LogStatsView.__super__.constructor.apply(this, arguments);\n    }\n\n    LogStatsView.prototype.template = _.template(templates.logStatsView);\n\n    LogStatsView.prototype.className = 'stats';\n\n    LogStatsView.prototype.initialize = function(opts) {\n      var _this = this;\n      this.stats = opts.stats;\n      this.rendered = false;\n      return setInterval((function() {\n        if (_this.rendered) {\n          return _this.render();\n        }\n      }), 1000);\n    };\n\n    LogStatsView.prototype.render = function() {\n      this.$el.html(this.template({\n        stats: this.stats\n      }));\n      this.rendered = true;\n      return this;\n    };\n\n    return LogStatsView;\n\n  })(backbone.View);\n\n  exports.WebClient = WebClient;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-log.io/node_modules/log.io/lib/templates.js":"// Generated by CoffeeScript 1.4.0\n(function() {\n\n  exports.clientApplication = \"\";\n\n  exports.logControlPanel = \"<a class=\\\"select_mode active\\\" href=\\\"#log_control_streams\\\">Streams</a>\\n<a class=\\\"select_mode\\\" href=\\\"#log_control_nodes\\\">Nodes</a>\";\n\n  exports.logMessage = \"<p>\\n<span class='stream color<%= lmessage.get('stream').color %>'><%= lmessage.get('stream').id %></span>\\n<span class='node color<%= lmessage.get('node').color %>'><%= lmessage.get('node').id %></span>\\n<span class='message'><%= msg %></span>\\n</p>\";\n\n  exports.logScreenView = \"<div class='controls'>\\n<% if (logScreens.length > 1) { %><a href=\\\"#\\\" class='close'>close</a><% } %>\\n  <a href=\\\"#\\\" class='clear'>clear</a>\\n  <a href=\\\"#\\\" class='filter'>filter <input type='text'/></a>\\n</div>\\n<div class='messages'>\\n  <div class='msg'></div>\\n</div>\";\n\n  exports.logScreensPanel = \"<div class='log_screens'></div>\\n<div class='status_bar'>\\n  <a href=\\\"#\\\" class='button' id=\\\"new_screen_button\\\">New Screen</a>\\n  <div class='stats'></div>\\n  <div style='clear: both;'</div>\\n</div>\";\n\n  exports.logStatsView = \"<%\\nvar elapsed = (new Date().getTime() - stats.start) / 1000;\\nvar minutes = parseInt(elapsed/60);\\nvar seconds = parseInt(elapsed%60);\\nif (seconds < 10) { seconds = \\\"0\\\" + seconds; }\\nvar prettyTime =  minutes + \\\":\\\" + seconds;\\n%>\\n<div class='stat'>\\n  <span class='num'><%= (stats.messages / elapsed).toFixed(2) %></span>\\n  <span class='label'>messages/sec</span>\\n</div>\\n<div class='stat'>\\n  <span class='num'><%= prettyTime %></span>\\n  <span class='label'>elapsed</span>\\n</div>\\n<div class='stat'>\\n  <span class='num'><%= stats.messages %></span>\\n  <span class='label'>Messages</span>\\n</div>\\n<div class='stat'>\\n  <span class='num'><%= stats.nodes %></span>\\n  <span class='label'>Nodes</span>\\n</div>\\n<div class='stat'>\\n  <span class='num'><%= stats.streams %></span>\\n  <span class='label'>Streams</span>\\n</div>\";\n\n  exports.objectControls = \"<input class='filter' placeholder=\\\"Filter...\\\" type='text'/>\\n<div class='groups'></div>\";\n\n  exports.objectGroupControls = \"<div class='items'></div>\";\n\n  exports.objectGroupHeader = \"<div class='screen_buttons'>\\n<% \\nvar active = false;\\nlogScreens.each(function(screen) {\\n  var sactive = screen.isActive(object, getPair);\\n  if (sactive) { active = true; }\\n%>\\n  <input type='checkbox' <% if (sactive) { %>checked=\\\"checked\\\" <% } %>title='screen-<%= screen.cid %>'/>\\n<% }); %>\\n</div>\\n<div class='diode floatl <% if (active) { print('active color' + object.color) } %>'></div>\\n<div class='object_name floatl'><%= object.get('name') %></div>\\n<div style='clear: both;'></div>\";\n\n  exports.objectItemControls = \"<div class='screen_buttons'>\\n<% \\nvar active = false;\\nlogScreens.each(function(screen) {\\n  var haspair = screen.hasPair(stream, node);\\n  if (haspair) { active = true; }\\n%>\\n  <input type='checkbox' <% if (haspair) { %>checked='checked'<% } %>title='screen-<%= screen.cid %>'/>\\n<% }); %>\\n</div>\\n<div class='diode floatl <% if (active) { print('active color' + item.color); } %>'></div>\\n<div class='item_name floatl'><%= item.get('name') %></div>\\n<div style='clear: both;'></div>\";\n\n}).call(this);\n"}